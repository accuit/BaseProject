 //------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AccuIT.PersistenceLayer.Data.EDMX
{
    using AccuIT.PersistenceLayer.Repository.Entities;
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class AccuITAdminEntities : DbContext
    {
        public AccuITAdminEntities()
            : base("name=AccuITAdminEntities")
        {
            //this.Configuration.LazyLoadingEnabled = false;
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<BrideAndMaid> BrideAndMaids { get; set; }
        public DbSet<CommonSetup> CommonSetups { get; set; }
        public DbSet<CompanyMaster> CompanyMasters { get; set; }
        public DbSet<DailyLoginHistory> DailyLoginHistories { get; set; }
        public DbSet<DreamWeddsBlog> DreamWeddsBlogs { get; set; }
        public DbSet<ECampaign> ECampaigns { get; set; }
        public DbSet<EmailService> EmailServices { get; set; }
        public DbSet<ErrorLog> ErrorLogs { get; set; }
        public DbSet<FAQ> FAQs { get; set; }
        public DbSet<GroomAndMan> GroomAndMen { get; set; }
        public DbSet<LoginAttemptHistory> LoginAttemptHistories { get; set; }
        public DbSet<ModuleMaster> ModuleMasters { get; set; }
        public DbSet<OrderDetail> OrderDetails { get; set; }
        public DbSet<OrderMaster> OrderMasters { get; set; }
        public DbSet<OTPMaster> OTPMasters { get; set; }
        public DbSet<Permission> Permissions { get; set; }
        public DbSet<RoleMaster> RoleMasters { get; set; }
        public DbSet<RoleModule> RoleModules { get; set; }
        public DbSet<RSVPDetail> RSVPDetails { get; set; }
        public DbSet<SubscriptionMaster> SubscriptionMasters { get; set; }
        public DbSet<SystemSetting> SystemSettings { get; set; }
        public DbSet<TemplateImage> TemplateImages { get; set; }
        public DbSet<TemplateMaster> TemplateMasters { get; set; }
        public DbSet<TemplateMergeField> TemplateMergeFields { get; set; }
        public DbSet<TemplatePage> TemplatePages { get; set; }
        public DbSet<TimeLine> TimeLines { get; set; }
        public DbSet<UserDevice> UserDevices { get; set; }
        public DbSet<UserMaster> UserMasters { get; set; }
        public DbSet<UserRoleModulePermission> UserRoleModulePermissions { get; set; }
        public DbSet<UserRole> UserRoles { get; set; }
        public DbSet<UserServiceAccess> UserServiceAccesses { get; set; }
        public DbSet<UserSystemSetting> UserSystemSettings { get; set; }
        public DbSet<UserWeddingSubscription> UserWeddingSubscriptions { get; set; }
        public DbSet<WeddingEvent> WeddingEvents { get; set; }
        public DbSet<Wedding> Weddings { get; set; }
        public DbSet<vwGetUserRoleModule> vwGetUserRoleModules { get; set; }
        public DbSet<vwGetUserWeddingTemplate> vwGetUserWeddingTemplates { get; set; }
        public DbSet<AddressMaster> AddressMasters { get; set; }
        public DbSet<Venue> Venues { get; set; }
        public DbSet<WeddingGallery> WeddingGalleries { get; set; }
    
        public virtual ObjectResult<SPCheckAuthentication_Result> SPCheckAuthentication(string loginName, string password, string iMEINumber, string lattitude, string longitude, string ipAddress, string browserName, string apkDeviceName, string aPKVersion, Nullable<byte> loginType)
        {
            var loginNameParameter = loginName != null ?
                new ObjectParameter("LoginName", loginName) :
                new ObjectParameter("LoginName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var iMEINumberParameter = iMEINumber != null ?
                new ObjectParameter("IMEINumber", iMEINumber) :
                new ObjectParameter("IMEINumber", typeof(string));
    
            var lattitudeParameter = lattitude != null ?
                new ObjectParameter("lattitude", lattitude) :
                new ObjectParameter("lattitude", typeof(string));
    
            var longitudeParameter = longitude != null ?
                new ObjectParameter("longitude", longitude) :
                new ObjectParameter("longitude", typeof(string));
    
            var ipAddressParameter = ipAddress != null ?
                new ObjectParameter("IpAddress", ipAddress) :
                new ObjectParameter("IpAddress", typeof(string));
    
            var browserNameParameter = browserName != null ?
                new ObjectParameter("BrowserName", browserName) :
                new ObjectParameter("BrowserName", typeof(string));
    
            var apkDeviceNameParameter = apkDeviceName != null ?
                new ObjectParameter("ApkDeviceName", apkDeviceName) :
                new ObjectParameter("ApkDeviceName", typeof(string));
    
            var aPKVersionParameter = aPKVersion != null ?
                new ObjectParameter("APKVersion", aPKVersion) :
                new ObjectParameter("APKVersion", typeof(string));
    
            var loginTypeParameter = loginType.HasValue ?
                new ObjectParameter("LoginType", loginType) :
                new ObjectParameter("LoginType", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPCheckAuthentication_Result>("SPCheckAuthentication", loginNameParameter, passwordParameter, iMEINumberParameter, lattitudeParameter, longitudeParameter, ipAddressParameter, browserNameParameter, apkDeviceNameParameter, aPKVersionParameter, loginTypeParameter);
        }
    
        public virtual ObjectResult<SPGetLoginDetails_Result> SPGetLoginDetails(Nullable<int> userID, Nullable<bool> showAnnouncment, string aPIKey, string aPIToken, string aPKVersion)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            var showAnnouncmentParameter = showAnnouncment.HasValue ?
                new ObjectParameter("showAnnouncment", showAnnouncment) :
                new ObjectParameter("showAnnouncment", typeof(bool));
    
            var aPIKeyParameter = aPIKey != null ?
                new ObjectParameter("APIKey", aPIKey) :
                new ObjectParameter("APIKey", typeof(string));
    
            var aPITokenParameter = aPIToken != null ?
                new ObjectParameter("APIToken", aPIToken) :
                new ObjectParameter("APIToken", typeof(string));
    
            var aPKVersionParameter = aPKVersion != null ?
                new ObjectParameter("APKVersion", aPKVersion) :
                new ObjectParameter("APKVersion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPGetLoginDetails_Result>("SPGetLoginDetails", userIDParameter, showAnnouncmentParameter, aPIKeyParameter, aPITokenParameter, aPKVersionParameter);
        }
    
        public virtual int SPGetUserLoginDetails(Nullable<int> userID, Nullable<bool> showAnnouncment, string aPIKey, string aPIToken, string aPKVersion)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            var showAnnouncmentParameter = showAnnouncment.HasValue ?
                new ObjectParameter("showAnnouncment", showAnnouncment) :
                new ObjectParameter("showAnnouncment", typeof(bool));
    
            var aPIKeyParameter = aPIKey != null ?
                new ObjectParameter("APIKey", aPIKey) :
                new ObjectParameter("APIKey", typeof(string));
    
            var aPITokenParameter = aPIToken != null ?
                new ObjectParameter("APIToken", aPIToken) :
                new ObjectParameter("APIToken", typeof(string));
    
            var aPKVersionParameter = aPKVersion != null ?
                new ObjectParameter("APKVersion", aPKVersion) :
                new ObjectParameter("APKVersion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPGetUserLoginDetails", userIDParameter, showAnnouncmentParameter, aPIKeyParameter, aPITokenParameter, aPKVersionParameter);
        }
    
        public virtual int SpClearLogs()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpClearLogs");
        }
    }
}
